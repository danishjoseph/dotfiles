"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printNxCloudSuccessMessage = exports.setupNxCloud = void 0;
const ora = require("ora");
const child_process_utils_1 = require("../child-process-utils");
const output_1 = require("../output");
const package_manager_1 = require("../package-manager");
const error_utils_1 = require("../error-utils");
async function setupNxCloud(directory, packageManager, nxCloud, useGitHub) {
    const nxCloudSpinner = ora(`Setting up Nx Cloud`).start();
    try {
        const pmc = (0, package_manager_1.getPackageManagerCommand)(packageManager);
        const res = await (0, child_process_utils_1.execAndWait)(process.env.NX_NEW_CLOUD_ONBOARDING === 'true'
            ? `${pmc.exec} nx g nx:connect-to-nx-cloud --installationSource=create-nx-workspace ${useGitHub ? '--github' : ''} --no-interactive`
            : `${pmc.exec} nx g nx:connect-to-nx-cloud --no-interactive --quiet`, directory);
        if (nxCloud !== 'yes') {
            nxCloudSpinner.succeed('CI workflow with Nx Cloud has been generated successfully');
        }
        else {
            nxCloudSpinner.succeed('Nx Cloud has been set up successfully');
        }
        return res;
    }
    catch (e) {
        nxCloudSpinner.fail();
        if (e instanceof Error) {
            output_1.output.error({
                title: `Failed to setup Nx Cloud`,
                bodyLines: (0, error_utils_1.mapErrorToBodyLines)(e),
            });
        }
        else {
            console.error(e);
        }
        process.exit(1);
    }
    finally {
        nxCloudSpinner.stop();
    }
}
exports.setupNxCloud = setupNxCloud;
function printNxCloudSuccessMessage(nxCloudOut) {
    // remove leading Nx carret and any new lines
    const logContent = nxCloudOut.split('NX   ')[1];
    const indexOfTitleEnd = logContent.indexOf('\n');
    const title = logContent.slice(0, logContent.indexOf('\n')).trim();
    const bodyLines = logContent
        .slice(indexOfTitleEnd)
        .replace(/^\n*/, '') // remove leading new lines
        .replace(/\n*$/, '') // remove trailing new lines
        .split('\n')
        .map((r) => r.trim());
    output_1.output.warn({
        title,
        bodyLines,
    });
}
exports.printNxCloudSuccessMessage = printNxCloudSuccessMessage;
