"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeGitRepo = exports.checkGitVersion = void 0;
const child_process_1 = require("child_process");
const default_base_1 = require("./default-base");
const output_1 = require("../output");
function checkGitVersion() {
    try {
        let gitVersionOutput = (0, child_process_1.execSync)('git --version').toString().trim();
        return gitVersionOutput.match(/[0-9]+\.[0-9]+\.+[0-9]+/)?.[0];
    }
    catch {
        return null;
    }
}
exports.checkGitVersion = checkGitVersion;
async function initializeGitRepo(directory, options) {
    const execute = (args, ignoreErrorStream = false) => {
        const outputStream = 'ignore';
        const errorStream = ignoreErrorStream ? 'ignore' : process.stderr;
        const spawnOptions = {
            stdio: [process.stdin, outputStream, errorStream],
            shell: true,
            cwd: directory,
            env: {
                ...process.env,
                ...(options.commit?.name
                    ? {
                        GIT_AUTHOR_NAME: options.commit.name,
                        GIT_COMMITTER_NAME: options.commit.name,
                    }
                    : {}),
                ...(options.commit?.email
                    ? {
                        GIT_AUTHOR_EMAIL: options.commit.email,
                        GIT_COMMITTER_EMAIL: options.commit.email,
                    }
                    : {}),
            },
        };
        return new Promise((resolve, reject) => {
            (0, child_process_1.spawn)('git', args, spawnOptions).on('close', (code) => {
                if (code === 0) {
                    resolve();
                }
                else {
                    reject(code);
                }
            });
        });
    };
    const gitVersion = checkGitVersion();
    if (!gitVersion) {
        return;
    }
    const insideRepo = await execute(['rev-parse', '--is-inside-work-tree'], true).then(() => true, () => false);
    if (insideRepo) {
        output_1.output.log({
            title: 'Directory is already under version control. Skipping initialization of git.',
        });
        return;
    }
    const defaultBase = options.defaultBase || (0, default_base_1.deduceDefaultBase)();
    const [gitMajor, gitMinor] = gitVersion.split('.');
    if (+gitMajor > 2 || (+gitMajor === 2 && +gitMinor >= 28)) {
        await execute(['init', '-b', defaultBase]);
    }
    else {
        await execute(['init']);
        await execute(['checkout', '-b', defaultBase]); // Git < 2.28 doesn't support -b on git init.
    }
    await execute(['add', '.']);
    if (options.commit) {
        const message = options.commit.message || 'initial commit';
        await execute(['commit', `-m "${message}"`]);
    }
}
exports.initializeGitRepo = initializeGitRepo;
