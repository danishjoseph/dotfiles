"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkspace = void 0;
const output_1 = require("./utils/output");
const nx_cloud_1 = require("./utils/nx/nx-cloud");
const create_sandbox_1 = require("./create-sandbox");
const create_empty_workspace_1 = require("./create-empty-workspace");
const create_preset_1 = require("./create-preset");
const setup_ci_1 = require("./utils/ci/setup-ci");
const git_1 = require("./utils/git/git");
const get_third_party_preset_1 = require("./utils/preset/get-third-party-preset");
const error_utils_1 = require("./utils/error-utils");
async function createWorkspace(preset, options) {
    const { packageManager, name, nxCloud, skipGit = false, defaultBase = 'main', commit, cliName, useGitHub, } = options;
    if (cliName) {
        output_1.output.setCliName(cliName ?? 'NX');
    }
    const tmpDir = await (0, create_sandbox_1.createSandbox)(packageManager);
    // nx new requires a preset currently. We should probably make it optional.
    const directory = await (0, create_empty_workspace_1.createEmptyWorkspace)(tmpDir, name, packageManager, { ...options, preset });
    // If the preset is a third-party preset, we need to call createPreset to install it
    // For first-party presets, it will be created by createEmptyWorkspace instead.
    // In createEmptyWorkspace, it will call `nx new` -> `@nx/workspace newGenerator` -> `@nx/workspace generatePreset`.
    const thirdPartyPackageName = (0, get_third_party_preset_1.getPackageNameFromThirdPartyPreset)(preset);
    if (thirdPartyPackageName) {
        await (0, create_preset_1.createPreset)(thirdPartyPackageName, options, packageManager, directory);
    }
    let nxCloudInstallRes;
    if (nxCloud !== 'skip') {
        nxCloudInstallRes = await (0, nx_cloud_1.setupNxCloud)(directory, packageManager, nxCloud, useGitHub);
        if (nxCloud !== 'yes') {
            await (0, setup_ci_1.setupCI)(directory, nxCloud, packageManager, nxCloudInstallRes?.code === 0);
        }
    }
    if (!skipGit && commit) {
        try {
            await (0, git_1.initializeGitRepo)(directory, { defaultBase, commit });
        }
        catch (e) {
            if (e instanceof Error) {
                output_1.output.error({
                    title: 'Could not initialize git repository',
                    bodyLines: (0, error_utils_1.mapErrorToBodyLines)(e),
                });
            }
            else {
                console.error(e);
            }
        }
    }
    return {
        nxCloudInfo: nxCloudInstallRes?.stdout,
        directory,
    };
}
exports.createWorkspace = createWorkspace;
